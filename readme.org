#+title: cbuild: Makefile on steroids in C.

Opinionated proof-of-concept build system/library using C.
Describe how to build your project in C instead of a Domain Specific Language (DSL).
No need to learn or install tools for Makefiles, CMake, Ninja, etc.
The build tool(e.g. gnumake, cmake) and describing how to build targets(e.g. Makefiles, CMakelists.txt) are consolidated into one program (cbuild).

Highlights:
- No external dependencies; just libc and a compiler(gcc, clang, msvc).
- Not limited by DSL. Who doesn't want render the build progress on a GPU in realtime?
- Single header library.
- Debug build tool and build recipe with a debugger.
- [WIP] Cross-platform (only linux for now)
- Reuse =cbuild.h= for scaffolding your C/C++ program with arena memory management, dynamic arrays, string-builder/slices, and cross-platform abstraction.

* Quickstart

#+begin_src shell
  cc -o cbuild cbuild.c # only once!
  ./cbuild
#+end_src

On subsequent changes to =cbuild.c= you do not have to recompile manually.
Just rerun ~./cbuild~, and the build tool re-compiles itself.

* Future ideas

Some ideas that will probably never come to fruition.

** Export minimally viable CMake for compatibility

Export the most basic cmake project for distribution.
All Package Maintainers probably know how to make CMake work.

** Metaprogramming

Make it easy to introspect C code base and metaprogram i.e. parse C and output C.
Get access to compile time type info, or seamlessly implement custom language features etc.
Also, compared to preprocessor macros, the metaprogram, and its output, is typesafe and debuggable.

#+begin_src C
  // foo.c
  #ifdef CBUILD_METAPROGRAM
  struct Slice {
    $T *items;
    size len;
  };
  #else
  // The output of the metaprogram could be commited in the source tree
  // to guarantee the program compiles without cbuild.
  #include "foo.meta.c"
  /* foo.meta.c:
    typedef struct { char **items; size len;  } SLice_Char;
    // .. typeinfo about Slice_Char
    typedef struct { i32 *items; size len;  } SLice_I32;
    // .. typeinfo about Slice_I32
   ,*/
  #endif
#+end_src

* References / Influences

- tsoding :: nob, REBUILD_YOURSELF macro
- nullprogram :: dynamic arrays, string builder and more
- ryanfj :: arena memory management
